# 更新文档

您将生成针对LLM优化的文档，包含具体文件引用和灵活格式。

## 您的任务

创建文档以允许人类和LLM能够：
- **理解项目目的** - 项目的功能和原因
- **获取架构概览** - 系统的组织方式  
- **在所有平台上构建** - 带有文件引用的构建说明
- **添加功能/子系统** - 遵循既定模式和示例
- **调试应用程序** - 通过具体文件位置排查问题
- **测试和添加测试** - 运行现有测试并创建新测试
- **部署和分发** - 打包和部署软件

## 必需的文档结构

每个文档必须包含：
1. **时间戳标头** - 包含最后更新时间戳的隐藏注释
2. **简要概览** （最多2-3段）
3. **关键文件和示例** - 每个主要主题的具体文件引用
4. **常见工作流程** - 带有文件位置的实用指导
5. **参考信息** - 带有文件路径的快速查找表

## 时间戳格式

每个生成的文件必须以以下格式开始：
```
<!-- Generated: YYYY-MM-DD HH:MM:SS UTC -->
```

## 流程

您将：
1. **系统性分析代码库** 涵盖7个关键领域（合并开发+模式）
2. **创建或更新文档** 在 `docs/*.md` 中包含具体文件引用
3. **将最终文档综合** 成最小化、LLM友好的README.md
4. **消除所有重复** 在各个文件中

## 分析方法论

对于每个领域，代理应该：
1. **检查关键文件**：查找构建配置、测试文件、部署脚本、主要源文件
2. **提取文件引用**：记录具体文件、行号和示例
3. **识别模式**：找到重复结构、命名约定、常见工作流程
4. **使内容对LLM友好**：token高效、重引用、实用示例

## 具体文件要求

并行发出以下任务调用：

**项目概览** (`docs/project-overview.md`)：
结构：
- 概览：项目是什么，核心目的，关键价值主张（2-3段）
- 关键文件：主要入口点和核心配置文件
- 技术栈：带有具体文件示例的核心技术
- 平台支持：带有平台特定文件位置的要求

**架构** (`docs/architecture.md`)：
结构：
- 概览：高级系统组织（2-3段）
- 组件映射：主要组件及其源文件位置
- 关键文件：核心头文件和实现的简要描述
- 数据流：信息如何流动，带有具体函数/文件引用

**构建系统** (`docs/build-system.md`)：
结构：
- 概览：构建系统及对主要构建配置的文件引用
- 构建工作流程：带有具体命令和配置文件的常见任务
- 平台设置：带有文件路径的平台特定要求
- 参考：构建目标、预设和带有文件位置的故障排除

**测试** (`docs/testing.md`)：
结构：
- 概览：测试方法及测试文件位置
- 测试类型：不同测试类别及具体文件示例
- 运行测试：带有文件路径和预期输出的命令
- 参考：测试文件组织和构建系统测试目标

**开发** (`docs/development.md`)：
结构：
- 概览：开发环境、代码风格、模式（如果存在旧的patterns.md则合并）
- 代码风格：带有具体文件示例的约定（显示代码库中的实际代码）
- 常见模式：带有文件引用和代码库示例的实现模式
- 工作流程：带有具体文件位置和示例的开发任务
- 参考：文件组织、命名约定、带有具体文件的常见问题

**部署** (`docs/deployment.md`)：
结构：
- 概览：带有脚本引用的打包和分发
- 包类型：不同包及构建目标和输出位置
- 平台部署：带有文件路径的平台特定打包
- 参考：部署脚本、输出位置、服务器配置

**文件目录** (`docs/files.md`)：
结构：
- 概览：带有描述和关系的综合文件目录（2-3段）
- 核心源文件：带有用途描述的主要应用逻辑
- 平台实现：带有接口映射的平台特定代码
- 构建系统：构建配置和辅助模块
- 配置：资产、脚本、配置 - 支持文件及其角色
- 参考：文件组织模式、命名约定、依赖关系

## 关键要求

### LLM优化格式
- **token高效**：避免冗余解释，专注于基本信息
- **具体文件引用**：始终包含具体文件路径，有帮助时包含行号
- **灵活格式**：使用子节、代码块、示例而不是僵化的步骤
- **模式示例**：显示代码库中的实际代码，而不是通用示例

### 无重复
- 每条信息只在一个文件中出现
- 构建信息只在build-system.md中
- 代码风格和模式只在development.md中
- 部署信息只在deployment.md中
- 交叉引用使用："参见 [docs/filename.md](docs/filename.md)"

### 文件引用格式
始终包含具体文件引用：
```
**核心系统** - src/core.h中的核心实现（第15-45行），src/platform/中的平台后端

**构建配置** - 主构建文件（第67-89行），配置文件

**模块管理** - src/module.h中的接口，src/module.c中的实现（第134行的key_function）
```

### 实用示例
使用代码库中的实际代码：
```c
// 来自 src/example.h:23-27
typedef struct {
    bool active;
    void *data;
    int count;
} ExampleState;
```

## 最后步骤

所有任务完成后：

1. **读取所有 `docs/*.md` 文件** 并创建README.md，包含：
   - 项目描述（最多2-3句）
   - 关键入口点和核心配置文件
   - 快速构建命令
   - 文档链接及LLM会发现有用的简要描述
   - 总计保持在50行以内

2. **重复检查**：扫描所有文件并删除任何重复信息

3. **文件引用检查**：确保所有文件路径准确且有帮助

## 代理指令

每个代理必须：
1. **读取现有文件**（如果存在）以了解当前内容
2. **系统性分析相关代码库文件**
3. **在整个分析过程中提取具体文件引用**：
   - 记录重要的头文件、源文件、配置文件
   - 在有帮助时包含关键函数/节的行号
   - 引用代码库中的实际代码示例
4. **创建LLM友好内容**：
   - token高效的写作（无冗余解释）
   - 始终包含具体文件路径和示例
   - 灵活格式（子节、代码块、实用指导）
   - 专注于LLM需要理解和使用代码的内容
5. **包含实用工作流程** 及具体文件引用
6. **创建参考节** 包含文件位置和行号
7. **更新时间戳** 在顶部使用当前UTC时间
8. **读取生成的文件** 并修订准确性和完整性

**成功标准**：每个文件应该是实用参考，帮助LLM快速理解代码库并找到特定任务的正确文件。

**development.md的特别说明**：将旧的development.md和patterns.md（如果存在）的内容合并到一个包含实现模式的综合开发指南中。

协调代理必须：
1. 等待所有代理完成
2. 读取所有生成的文件
3. 删除发现的任何重复
4. 创建包含关键文件引用的最小化、LLM优化的README.md
5. **使用当前UTC时间更新README.md时间戳**
6. 删除docs/patterns.md（如果存在），因为它已合并到development.md中

## 文件代理指令

文件代理应创建最小化、token高效的文件目录：

1. **发现文件**：使用Glob和LS查找所有源文件、配置和构建文件
2. **按功能分组**：将文件组织成逻辑类别（核心、平台、构建、测试、配置）
3. **简要描述**：每个重要文件一行描述其主要用途
4. **关键入口点**：突出显示主要文件、构建配置和重要头文件
5. **依赖关系**：记录文件组之间的主要关系

**格式**：带有文件路径和单句描述的简洁列表。专注于帮助LLM快速定位功能，而不是全面的文档。

**成功标准**：LLM可以快速找到"主入口点在哪里"、"哪些文件处理X"、"关键头文件是什么"，无需阅读详细描述。