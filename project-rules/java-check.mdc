---
description: 执行Java项目的综合代码质量和安全检查
globs: ["**/*.java", "**/pom.xml", "**/build.gradle", "**/gradle.properties"]
alwaysApply: false
---

# Java代码质量检查

对Java项目执行全面的代码质量、安全性和最佳实践检查。

## 主要任务：
运行项目特定的检查命令并解决所有发现的问题。

## 重要提醒：
- 在此过程中不要提交任何代码
- 不要更改版本号
- 专注于修复检查发现的问题
- 遵循Java代码规范和最佳实践

## Java项目检查类型：

### 1. **构建验证**
- **Maven项目**: `mvn clean compile`
- **Gradle项目**: `./gradlew clean compileJava`
- **编译错误**: 语法错误、导入缺失、类型不匹配

### 2. **单元测试**
- **Maven**: `mvn test`
- **Gradle**: `./gradlew test`
- **测试覆盖率**: JaCoCo报告分析
- **失败测试**: 修复断言错误和测试逻辑

### 3. **代码风格检查**
- **Checkstyle**: `mvn checkstyle:check` 或 `./gradlew checkstyleMain`
- **Google Java Format**: `google-java-format --set-exit-if-changed $(find . -name "*.java")`
- **Spotless**: `./gradlew spotlessCheck`

### 4. **静态代码分析**
- **SpotBugs**: `mvn spotbugs:check` 或 `./gradlew spotbugsMain`
- **PMD**: `mvn pmd:check` 或 `./gradlew pmdMain`
- **SonarQube**: `mvn sonar:sonar` (如果配置)

### 5. **依赖安全检查**
- **OWASP Dependency Check**: `mvn dependency-check:check`
- **Gradle**: `./gradlew dependencyCheckAnalyze`
- **漏洞扫描**: 检查已知安全漏洞

### 6. **代码复杂度分析**
- **圈复杂度**: 通过PMD或SonarQube检查
- **认知复杂度**: 方法和类的复杂度评估
- **重复代码**: CPD（Copy/Paste Detector）检查

## 检查流程：

### 阶段1：基础验证
```bash
# Maven项目
mvn clean compile
mvn test

# Gradle项目  
./gradlew clean compileJava
./gradlew test
```

### 阶段2：代码质量
```bash
# 代码风格
mvn checkstyle:check
./gradlew checkstyleMain checkstyleTest

# 代码格式化
google-java-format --replace $(find src -name "*.java")
./gradlew spotlessApply
```

### 阶段3：静态分析
```bash
# 缺陷检测
mvn spotbugs:check
./gradlew spotbugsMain

# 代码质量
mvn pmd:check  
./gradlew pmdMain
```

### 阶段4：安全检查
```bash
# 依赖漏洞
mvn dependency-check:check
./gradlew dependencyCheckAnalyze
```

## 问题修复优先级：

1. **构建错误** - 阻止编译的问题
2. **测试失败** - 单元测试和集成测试错误
3. **安全漏洞** - 高/中危险等级的安全问题
4. **代码缺陷** - SpotBugs发现的bug模式
5. **代码风格** - Checkstyle和格式化问题
6. **代码异味** - PMD发现的代码质量问题

## 常见Java问题及解决方案：

### 编译问题
- **缺少导入**: 添加正确的import语句
- **类型不匹配**: 检查泛型和类型转换
- **方法签名**: 确保方法重写正确

### 代码风格问题
- **命名规范**: 类名PascalCase，方法名camelCase
- **缩进**: 使用4个空格，不使用tabs
- **行长度**: 限制在100-120字符
- **导入顺序**: 按字母顺序排列，分组静态导入

### 常见缺陷
- **空指针检查**: 添加null检查或使用Optional
- **资源泄漏**: 使用try-with-resources语句
- **equals()和hashCode()**: 保持一致性实现
- **字符串比较**: 使用equals()而不是==

### 性能问题
- **StringBuilder**: 在循环中拼接字符串时使用
- **集合初始化**: 指定合适的初始容量
- **循环优化**: 避免在循环中重复计算

## 项目特定配置：

### Maven配置示例 (pom.xml)
```xml
<plugin>
    <groupId>com.github.spotbugs</groupId>
    <artifactId>spotbugs-maven-plugin</artifactId>
    <version>4.7.3.0</version>
</plugin>

<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-checkstyle-plugin</artifactId>
    <version>3.2.0</version>
    <configuration>
        <configLocation>google_checks.xml</configLocation>
    </configuration>
</plugin>
```

### Gradle配置示例 (build.gradle)
```gradle
plugins {
    id 'checkstyle'
    id 'com.github.spotbugs' version '5.0.13'
    id 'pmd'
}

checkstyle {
    toolVersion = '10.9.3'
    configFile = file('config/checkstyle/google_checks.xml')
}

spotbugs {
    effort = 'max'
    reportLevel = 'low'
}
```

## 执行检查后：
1. 查看所有工具的输出报告
2. 按优先级修复问题
3. 每次修复后重新运行相关检查
4. 确保所有检查都通过
5. 验证代码仍然正常工作

## 质量指标目标：
- **测试覆盖率**: ≥80%
- **圈复杂度**: 方法<10，类<50
- **重复代码**: <3%
- **安全漏洞**: 0个高危，最小化中危
- **代码风格**: 100%符合规范