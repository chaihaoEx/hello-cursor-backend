---
description: 生成Mermaid图表用于可视化代码结构和关系的中文指南
globs: ["**/*.md", "**/*.mmd", "**/docs/**/*"]
alwaysApply: false
---

# Mermaid 图表生成

生成Mermaid图表来可视化代码结构、业务流程和系统关系。

## 常用图表类型：

### 1. 实体关系图 (ERD)
用于数据库模式和数据模型：
```mermaid
erDiagram
    用户 ||--o{ 订单 : 下单
    订单 ||--|{ 订单项 : 包含
    商品 ||--o{ 订单项 : 被订购
    用户 {
        bigint id PK "用户ID"
        varchar email UK "邮箱地址"
        varchar name "用户姓名"
        datetime created_date "创建时间"
    }
    订单 {
        bigint id PK "订单ID"
        bigint user_id FK "用户ID"
        decimal total_amount "总金额"
        varchar status "订单状态"
        datetime order_date "下单时间"
    }
    订单项 {
        bigint id PK "订单项ID"
        bigint order_id FK "订单ID"
        bigint product_id FK "商品ID"
        int quantity "数量"
        decimal price "单价"
    }
    商品 {
        bigint id PK "商品ID"
        varchar name "商品名称"
        decimal price "价格"
        int stock "库存"
        varchar description "描述"
    }
```

### 2. 流程图
用于业务流程和逻辑流程：
```mermaid
flowchart TD
    A[开始] --> B{用户登录?}
    B -->|是| C[验证权限]
    B -->|否| D[跳转登录页]
    C --> E{权限验证}
    E -->|通过| F[访问资源]
    E -->|失败| G[显示错误信息]
    D --> H[用户输入凭据]
    H --> I[验证凭据]
    I -->|成功| C
    I -->|失败| J[显示登录错误]
    F --> K[结束]
    G --> K
    J --> H
    
    style A fill:#e1f5fe
    style K fill:#f3e5f5
    style F fill:#e8f5e8
    style G fill:#ffebee
    style J fill:#ffebee
```

### 3. 时序图
用于系统交互流程：
```mermaid
sequenceDiagram
    participant 客户端
    participant 网关
    participant 用户服务
    participant 数据库
    participant 缓存
    
    客户端->>网关: 登录请求
    网关->>用户服务: 转发请求
    用户服务->>缓存: 检查用户缓存
    缓存-->>用户服务: 缓存未命中
    用户服务->>数据库: 查询用户信息
    数据库-->>用户服务: 返回用户数据
    用户服务->>缓存: 更新用户缓存
    用户服务->>用户服务: 生成JWT令牌
    用户服务-->>网关: 返回令牌
    网关-->>客户端: 登录成功响应
    
    Note over 用户服务,缓存: 缓存有效期30分钟
    Note over 客户端,网关: HTTPS加密传输
```

### 4. 类图
用于面向对象设计：
```mermaid
classDiagram
    class 用户 {
        -Long id
        -String email
        -String name
        -LocalDateTime createdDate
        +登录() boolean
        +更新资料(用户信息) void
        +获取订单列表() List~订单~
    }
    
    class 订单 {
        -Long id
        -Long userId
        -BigDecimal totalAmount
        -订单状态 status
        -LocalDateTime orderDate
        +添加订单项(订单项) void
        +计算总金额() BigDecimal
        +更新状态(订单状态) void
    }
    
    class 订单项 {
        -Long id
        -Long orderId
        -Long productId
        -Integer quantity
        -BigDecimal price
        +计算小计() BigDecimal
    }
    
    class 商品 {
        -Long id
        -String name
        -BigDecimal price
        -Integer stock
        +检查库存(数量) boolean
        +更新库存(数量) void
    }
    
    用户 ||--o{ 订单 : 拥有
    订单 ||--o{ 订单项 : 包含
    商品 ||--o{ 订单项 : 关联
```

### 5. 状态图
用于状态机和生命周期：
```mermaid
stateDiagram-v2
    [*] --> 待支付 : 创建订单
    
    待支付 --> 已支付 : 支付成功
    待支付 --> 已取消 : 超时/用户取消
    
    已支付 --> 待发货 : 库存确认
    已支付 --> 退款中 : 申请退款
    
    待发货 --> 已发货 : 商家发货
    待发货 --> 退款中 : 申请退款
    
    已发货 --> 已完成 : 确认收货
    已发货 --> 退货中 : 申请退货
    
    退款中 --> 已退款 : 退款完成
    退款中 --> 已支付 : 退款失败
    
    退货中 --> 已退货 : 退货完成
    退货中 --> 已发货 : 退货失败
    
    已取消 --> [*]
    已完成 --> [*]
    已退款 --> [*]
    已退货 --> [*]
    
    note right of 待支付 : 支付时限15分钟
    note right of 已发货 : 自动确认收货7天
```

### 6. Git分支图
用于版本控制流程：
```mermaid
gitgraph
    commit id: "初始提交"
    branch 开发分支
    checkout 开发分支
    commit id: "添加用户模块"
    commit id: "添加订单模块"
    
    branch 功能分支
    checkout 功能分支
    commit id: "实现支付功能"
    commit id: "添加单元测试"
    
    checkout 开发分支
    merge 功能分支
    commit id: "集成测试"
    
    checkout main
    merge 开发分支
    commit id: "发布v1.0"
    
    checkout 开发分支
    commit id: "热修复bug"
    
    checkout main
    merge 开发分支
    commit id: "发布v1.0.1"
```

### 7. 系统架构图
用于微服务和系统设计：
```mermaid
graph TB
    subgraph "客户端层"
        Web[Web前端]
        Mobile[移动应用]
        Admin[管理后台]
    end
    
    subgraph "网关层"
        Gateway[API网关]
    end
    
    subgraph "业务服务层"
        UserService[用户服务]
        OrderService[订单服务]
        ProductService[商品服务]
        PaymentService[支付服务]
    end
    
    subgraph "数据层"
        MySQL[(MySQL数据库)]
        Redis[(Redis缓存)]
        MongoDB[(MongoDB文档库)]
    end
    
    subgraph "消息队列"
        RabbitMQ[RabbitMQ]
    end
    
    subgraph "监控运维"
        Monitor[监控系统]
        Log[日志系统]
    end
    
    Web --> Gateway
    Mobile --> Gateway
    Admin --> Gateway
    
    Gateway --> UserService
    Gateway --> OrderService
    Gateway --> ProductService
    
    OrderService --> PaymentService
    OrderService --> ProductService
    
    UserService --> MySQL
    OrderService --> MySQL
    ProductService --> MongoDB
    
    UserService --> Redis
    OrderService --> Redis
    
    OrderService --> RabbitMQ
    PaymentService --> RabbitMQ
    
    UserService --> Monitor
    OrderService --> Monitor
    ProductService --> Monitor
    PaymentService --> Monitor
    
    UserService --> Log
    OrderService --> Log
    ProductService --> Log
    PaymentService --> Log
    
    style Web fill:#e1f5fe
    style Mobile fill:#e1f5fe
    style Admin fill:#e1f5fe
    style Gateway fill:#fff3e0
    style MySQL fill:#e8f5e8
    style Redis fill:#ffebee
    style MongoDB fill:#f3e5f5
```

## 生成流程：

### 1. 分析源文件
- 检查SQL脚本、实体类、配置文件
- 提取实体、关系和业务流程
- 识别系统组件和交互模式

### 2. 选择图表类型
- **数据模型** → 实体关系图
- **业务流程** → 流程图或状态图
- **系统交互** → 时序图
- **代码结构** → 类图
- **系统架构** → 架构图

### 3. 生成图表内容
- 使用中文标签和注释
- 包含相关属性和方法
- 添加关系标注和基数
- 设置适当的样式和颜色

### 4. 验证和优化
- 检查Mermaid语法正确性
- 确保图表清晰易读
- 添加必要的注释说明

## 验证命令：
```bash
# 安装Mermaid CLI工具
npm install -g @mermaid-js/mermaid-cli

# 验证语法并生成PNG图片
mmdc -i diagram.mmd -o diagram.png

# 生成SVG矢量图
mmdc -i diagram.mmd -o diagram.svg

# 批量处理
mmdc -i input/ -o output/
```

## 最佳实践：

### 图表设计原则
- **保持简洁** - 避免信息过载，专注核心关系
- **使用中文** - 标签、注释使用中文，提高可读性
- **一致命名** - 统一的命名规范和术语
- **分组组织** - 使用子图分组相关元素
- **添加注释** - 重要的业务规则和约束
- **设置样式** - 使用颜色区分不同类型的节点

### 实体关系图
- 明确主键(PK)和外键(FK)
- 标注字段类型和约束
- 显示表间关系基数
- 使用中文表名和字段名

### 流程图
- 清晰的开始和结束节点
- 决策节点使用菱形
- 流程方向从上到下或从左到右
- 异常流程用不同颜色标识

### 时序图
- 按时间顺序排列交互
- 区分同步和异步调用
- 添加重要的业务注释
- 标注超时和重试机制

### 类图
- 显示重要的属性和方法
- 标注访问修饰符
- 包含继承和组合关系
- 使用中文类名和方法名

## 常用场景：

### Spring Boot项目文档
- 生成JPA实体关系图
- 绘制REST API交互流程
- 展示微服务架构图
- 描述消息队列流程

### 数据库设计
- ER图显示表结构关系
- 展示数据流转过程
- 描述触发器和存储过程逻辑

### 业务分析
- 用户旅程图
- 业务流程图
- 状态机图
- 决策树图

## 输出格式：
- **Markdown文档** - 包含Mermaid代码块
- **独立文件** - .mmd格式的Mermaid文件
- **图片导出** - PNG、SVG、PDF格式
- **在线分享** - Mermaid Live Editor链接

通过合理使用Mermaid图表，可以有效提升文档质量，改善团队沟通效率，使复杂的系统和流程变得直观易懂。